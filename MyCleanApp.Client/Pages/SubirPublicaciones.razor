@page "/subir-publicacion"
@inject DocenteService DocenteService
@inject NavigationManager Navigation

@inject IJSRuntime JS

<div class="max-w-xl mx-auto mt-10">
    <div class="bg-white border border-gray-200 rounded-lg shadow-lg p-8">
        <div class="flex justify-end mb-4">
            <button
                class="flex items-center gap-2 bg-gray-100 hover:bg-blue-100 text-blue-700 font-medium py-1.5 px-4 rounded transition-colors border border-gray-200 shadow-sm"
                @onclick="VolverAlDashboard">
                <svg class="h-5 w-5 text-blue-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 19l-7-7 7-7" />
                </svg>
                Volver al Dashboard
            </button>
        </div>
        <h2 class="text-2xl font-bold text-blue-700 mb-2 flex items-center gap-2">
            <svg class="h-7 w-7 text-blue-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 4v16m8-8H4" />
            </svg>
            Nueva Publicación Académica
        </h2>
        <p class="text-gray-600 mb-6">Completa el formulario para registrar una nueva publicación en el sistema.</p>

        <EditForm Model="@publicacion" OnValidSubmit="SubirPublicacion" class="space-y-5">
            <div>
                <label class="block text-sm font-medium text-gray-700 mb-1">Título</label>
                <InputText @bind-Value="publicacion.Titulo"
                    class="w-full border border-gray-300 rounded-md px-3 py-2 focus:outline-none focus:ring-2 focus:ring-blue-500" />
            </div>
            <div>
                <label class="block text-sm font-medium text-gray-700 mb-1">Revista</label>
                <InputText @bind-Value="publicacion.Revista"
                    class="w-full border border-gray-300 rounded-md px-3 py-2 focus:outline-none focus:ring-2 focus:ring-blue-500" />
            </div>
            <div class="grid grid-cols-2 gap-4">
                <div>
                    <label class="block text-sm font-medium text-gray-700 mb-1">Volumen</label>
                    <InputText @bind-Value="publicacion.Volumen"
                        class="w-full border border-gray-300 rounded-md px-3 py-2 focus:outline-none focus:ring-2 focus:ring-blue-500" />
                </div>
                <div>
                    <label class="block text-sm font-medium text-gray-700 mb-1">Año</label>
                    <InputNumber @bind-Value="publicacion.Anio"
                        class="w-full border border-gray-300 rounded-md px-3 py-2 focus:outline-none focus:ring-2 focus:ring-blue-500" />
                </div>
            </div>
            <div>
                <label class="block text-sm font-medium text-gray-700 mb-1">Tipo</label>
                <InputText @bind-Value="publicacion.Tipo"
                    class="w-full border border-gray-300 rounded-md px-3 py-2 focus:outline-none focus:ring-2 focus:ring-blue-500" />
            </div>
            <div>
                <label class="block text-sm font-medium text-gray-700 mb-1">Archivo PDF</label>
                <InputFile OnChange="OnFileChange" class="w-full text-gray-700" />
            </div>
            <div class="flex justify-end">
                <button type="submit"
                    class="bg-blue-600 hover:bg-blue-700 text-white font-semibold py-2 px-6 rounded-md shadow transition-colors focus:outline-none focus:ring-2 focus:ring-blue-500">
                    Guardar Publicación
                </button>
            </div>
        </EditForm>
    </div>
</div>

@code {
    PublicacionAcademicaRequest publicacion = new() { DocenteId = 1 };

    private async Task OnFileChange(InputFileChangeEventArgs e)
    {
        var file = e.File;
        using var stream = file.OpenReadStream();
        using var ms = new MemoryStream();
        await stream.CopyToAsync(ms);
        publicacion.Archivo = Convert.ToBase64String(ms.ToArray());
    }

    private async Task SubirPublicacion()
    {
        var ok = await DocenteService.SubirPublicacionAcademicaAsync(publicacion);
        if (ok)
            await JS.InvokeVoidAsync("alert", "✅ Publicación subida con éxito.");
        else
            await JS.InvokeVoidAsync("alert", "❌ Error al subir la publicación.");
    }
    private void VolverAlDashboard()
    {
        Navigation.NavigateTo("/teacher-dashboard");
    }
}