@page "/teacher/overview"
@inject MyCleanApp.Client.Services.PromotionProgressService PromotionProgressService
@inject MyCleanApp.Client.Services.TeacherService TeacherService
@inject LocalStorageService LocalStorageService

@* Sección Resumen *@
<div class="space-y-4">
    @if (isLoading)
    {
        <div class="p-6">Cargando resumen...</div>
    }
    else if (!string.IsNullOrEmpty(error))
    {
        <div class="p-6 text-red-600">Error: @error</div>
    }
    else if (progreso != null)
    {
        <div class="border rounded-lg p-4 border-amber-500 bg-amber-50">
            <div class="flex">
                <svg class="h-5 w-5 text-amber-500" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 9v2m0 4h.01m-6.938 4h13.856c1.54 0 2.502-1.667 1.732-2.5L13.732 4c-.77-.833-1.964-.833-2.732 0L4.082 16.5c-.77.833.192 2.5 1.732 2.5z" />
                </svg>
                <div class="ml-3">
                    <h3 class="text-sm font-medium">Progreso hacia DT.3</h3>
                    <div class="mt-2 text-sm">
                        Has completado @progreso.Cumplidos de @progreso.Total requisitos necesarios para avanzar al siguiente nivel.
                    </div>
                </div>
            </div>
        </div>
        <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4">
            @if (progreso.Detalle != null)
            {
                @foreach (var det in progreso.Detalle)
                {
                    <div class="border rounded-lg p-4">
                        <div class="font-medium">Requisito ID: @det.RequisitoId</div>
                        <div class="text-sm">Cumplido: @(det.Cumplido ? "Sí" : "No")</div>
                        <div class="text-xs text-gray-500">Fecha: @(det.Cumplido ? det.FechaCumplimiento.ToString("yyyy-MM-dd") : "-")</div>
                    </div>
                }
            }
        </div>
        <div class="bg-white border border-gray-200 rounded-lg shadow-sm">
            <div class="p-6">
                <h3 class="text-lg font-medium mb-2">Próximas fechas importantes</h3>
                <p class="text-sm text-gray-600 mb-4">Eventos y fechas límite relevantes para tu desarrollo profesional</p>
                <div class="space-y-2">
                    <div class="text-gray-500 text-sm">(Próximos eventos: integración futura)</div>
                </div>
            </div>
        </div>
    }
    @* <div class="p-2 bg-yellow-100 text-xs text-gray-700 rounded mb-2">
        <b>Debug:</b> Usuario autenticado Id: @loginUserId<br />
        Docentes recibidos: @string.Join(", ", docentesDebug?.Select(d => $"[Id={d.Id},UsuarioId={d.UsuarioId}]") ?? new List<string>())
    </div> *@
</div>

@code {
    private MyCleanApp.Client.Services.PromotionProgressDto? progreso;
    private bool isLoading = true;
    private string? error;
    private int docenteId = 0;
    private int loginUserId = 0;
    private List<MyCleanApp.Client.Services.DocenteDto>? docentesDebug;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            isLoading = true;
            var loginResponse = await LocalStorageService.ObtenerObjetoAsync<LoginResponse>("loginResponse");
            if (loginResponse?.usuario == null)
            {
                error = "No se pudo obtener el usuario autenticado.";
                isLoading = false;
                return;
            }
            loginUserId = loginResponse.usuario.Id;
            var docentes = await TeacherService.GetAllTeachersAsync();
            docentesDebug = docentes;
            var docente = docentes?.FirstOrDefault(d => d.UsuarioId == loginResponse.usuario.Id);
            if (docente == null)
            {
                error = "No se encontró el perfil de docente para este usuario.";
                isLoading = false;
                return;
            }
            docenteId = docente.Id;
            progreso = await PromotionProgressService.GetProgressByTeacherIdAsync(docenteId);
        }
        catch (Exception ex)
        {
            error = ex.Message;
        }
        isLoading = false;
    }
}
