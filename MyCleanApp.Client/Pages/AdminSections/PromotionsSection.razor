@page "/promociones"
@using MyCleanApp.Client.Services
@inject MyCleanApp.Client.Services.PromotionRequestService PromotionRequestService
@inject MyCleanApp.Client.Services.PromotionRequirementService RequirementService
@inject MyCleanApp.Client.Services.TeacherService TeacherService
@inject MyCleanApp.Client.Services.NivelAcademicoService NivelService
@inject MyCleanApp.Client.Services.UserService UserService

@code {
    private List<SolicitudAvanceRangoDto>? solicitudes;
    private List<RequisitoPromocionDto>? requisitos;
    private List<DocenteDto>? docentes;
    private List<NivelAcademicoDto>? niveles;
    private List<UsuarioDto>? usuarios;
    private bool isLoading = true;
    private string? error;
    private bool mostrarFormularioRequisito = false;
    private bool editandoRequisito = false;
    private RequisitoPromocionDto requisitoForm = new();

    protected override async Task OnInitializedAsync()
    {
        await CargarDatos();
    }

    private async Task CargarDatos()
    {
        try
        {
            isLoading = true;
            solicitudes = await PromotionRequestService.GetAllRequestsAsync();
            requisitos = await RequirementService.GetAllRequirementsAsync();
            docentes = await TeacherService.GetAllTeachersAsync();
            niveles = await NivelService.GetAllAsync();
            usuarios = await UserService.GetAllUsersAsync();
        }
        catch (Exception ex)
        {
            error = ex.Message;
        }
        isLoading = false;
    }

    private string GetNombreDocente(int docenteId)
    {
        var docente = docentes?.FirstOrDefault(d => d.Id == docenteId);
        if (docente == null) return "-";
        var usuario = usuarios?.FirstOrDefault(u => u.Id == docente.UsuarioId);
        return usuario?.NombreCompleto ?? "-";
    }
    private string GetNivelNombre(int nivelId)
    {
        var nivel = niveles?.FirstOrDefault(n => n.Id == nivelId);
        return nivel?.Nombre ?? "-";
    }

    private async Task AprobarSolicitud(int id)
    {
        isLoading = true;
        error = null;
        try
        {
            var admin = usuarios?.FirstOrDefault(u => u.Rol == "Administrador");
            if (admin == null)
            {
                error = "No se encontró un usuario administrador para aprobar la solicitud.";
                isLoading = false;
                return;
            }
            await PromotionRequestService.ApproveRequestAsync(id, admin.Id);
            await CargarDatos();
        }
        catch (Exception ex)
        {
            error = ex.Message;
        }
        isLoading = false;
    }
    private async Task RechazarSolicitud(int id)
    {
        isLoading = true;
        error = null;
        try
        {
            var admin = usuarios?.FirstOrDefault(u => u.Rol == "Administrador");
            if (admin == null)
            {
                error = "No se encontró un usuario administrador para rechazar la solicitud.";
                isLoading = false;
                return;
            }
            await PromotionRequestService.RejectRequestAsync(id, admin.Id);
            await CargarDatos();
        }
        catch (Exception ex)
        {
            error = ex.Message;
        }
        isLoading = false;
    }
    private void MostrarFormularioNuevoRequisito()
    {
        requisitoForm = new RequisitoPromocionDto();
        editandoRequisito = false;
        mostrarFormularioRequisito = true;
    }
    private void EditarRequisito(RequisitoPromocionDto req)
    {
        requisitoForm = new RequisitoPromocionDto
        {
            Id = req.Id,
            Nombre = req.Nombre,
            PorcentajeAsignado = req.PorcentajeAsignado
        };
        editandoRequisito = true;
        mostrarFormularioRequisito = true;
    }
    private async Task GuardarRequisito()
    {
        isLoading = true;
        error = null;
        try
        {
            if (editandoRequisito && requisitoForm.Id > 0)
            {
                await RequirementService.UpdateRequirementAsync(requisitoForm.Id, requisitoForm);
            }
            else
            {
                await RequirementService.CreateRequirementAsync(requisitoForm);
            }
            mostrarFormularioRequisito = false;
            await CargarDatos();
        }
        catch (Exception ex)
        {
            error = ex.Message;
        }
        isLoading = false;
    }
    private async Task EliminarRequisito(int id)
    {
        isLoading = true;
        error = null;
        try
        {
            await RequirementService.DeleteRequirementAsync(id);
            await CargarDatos();
        }
        catch (Exception ex)
        {
            error = ex.Message;
        }
        isLoading = false;
    }
}

@if (isLoading)
{
    <div class="p-6">Cargando promociones...</div>
}
else if (!string.IsNullOrEmpty(error))
{
    <div class="p-6 text-red-600">Error: @error</div>
}
else
{
    <div class="bg-white border border-gray-200 rounded-lg shadow-sm">
        <div class="p-6">
            <h3 class="text-lg font-medium mb-2">Gestión de Promociones</h3>
            <p class="text-sm text-gray-600 mb-4">Solicitudes de promoción y requisitos</p>
            <div class="space-y-4">
                <div class="border rounded-lg overflow-hidden">
                    <div class="bg-blue-50 p-4">
                        <h3 class="font-medium">Solicitudes de Promoción</h3>
                    </div>
                    <div class="divide-y">
                        @if (solicitudes != null && solicitudes.Any())
                        {
                            @foreach (var solicitud in solicitudes)
                            {
                                <div class="p-4 flex flex-col md:flex-row justify-between gap-4">
                                    <div>
                                        <div class="font-medium flex items-center">
                                            @GetNombreDocente(solicitud.DocenteId)
                                            <span class="inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium bg-blue-50 ml-2">@GetNivelNombre(solicitud.NuevoNivelAcademicoId)</span>
                                            <span class="mx-2 text-gray-400">→</span>
                                            <span class="inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium bg-green-50 border-green-200 text-green-700">@solicitud.Estado</span>
                                        </div>
                                        <div class="text-xs text-gray-500 mt-1">Fecha solicitud: @(solicitud.FechaSolicitud == default(DateTime) ? "-" : solicitud.FechaSolicitud.ToString("yyyy-MM-dd"))</div>
                                        @if (!string.IsNullOrWhiteSpace(solicitud.Observaciones))
                                        {
                                            <div class="text-xs text-gray-500 mt-1">Obs: @solicitud.Observaciones</div>
                                        }
                                    </div>
                                    <div class="flex items-center gap-2">
                                        <button class="bg-green-600 hover:bg-green-700 text-white px-3 py-1 rounded" @onclick="() => AprobarSolicitud(solicitud.Id)">Aprobar</button>
                                        <button class="bg-red-600 hover:bg-red-700 text-white px-3 py-1 rounded" @onclick="() => RechazarSolicitud(solicitud.Id)">Rechazar</button>
                                    </div>
                                </div>
                            }
                        }
                        else
                        {
                            <div class="p-4 text-center text-gray-400">No hay solicitudes de promoción registradas.</div>
                        }
                    </div>
                </div>
                <div class="bg-white border border-gray-200 rounded-lg shadow-sm">
                    <div class="p-6">
                        <div class="flex flex-row items-center justify-between mb-4">
                            <h3 class="text-lg font-medium mb-4">Requisitos de Promoción</h3>
                            <button class="bg-blue-600 hover:bg-blue-700 text-white font-medium py-2 px-4 rounded-md transition-colors" @onclick="MostrarFormularioNuevoRequisito">Registrar Requisito</button>
                        </div>
                        <div class="overflow-x-auto">
                            <table class="w-full border-collapse">
                                <thead>
                                    <tr class="bg-gray-50">
                                        <th class="border px-4 py-2 text-left">Requisito</th>
                                        <th class="border px-4 py-2 text-left">Porcentaje</th>
                                        <th class="border px-4 py-2 text-left">Acciones</th>
                                    </tr>
                                </thead>
                                <tbody>
                                    @if (requisitos != null && requisitos.Any())
                                    {
                                        @foreach (var req in requisitos)
                                        {
                                            <tr>
                                                <td class="border px-4 py-2">@req.Nombre</td>
                                                <td class="border px-4 py-2">@req.PorcentajeAsignado %</td>
                                                <td class="border px-4 py-2 space-x-2">
                                                    <button class="text-blue-600 hover:underline" @onclick="() => EditarRequisito(req)">Editar</button>
                                                    <button class="text-red-600 hover:underline" @onclick="() => EliminarRequisito(req.Id)">Eliminar</button>
                                                </td>
                                            </tr>
                                        }
                                    }
                                    else
                                    {
                                        <tr><td colspan="3" class="border px-4 py-2 text-center text-gray-400">No hay requisitos registrados.</td></tr>
                                    }
                                </tbody>
                            </table>
                        </div>
                    </div>
                </div>
                @if (mostrarFormularioRequisito)
                {
                    <div class="fixed inset-0 bg-black bg-opacity-40 flex items-center justify-center z-50">
                        <div class="bg-white rounded-lg shadow-lg p-6 w-full max-w-md">
                            <h3 class="text-lg font-medium mb-4">@(editandoRequisito ? "Editar Requisito" : "Registrar Requisito")</h3>
                            <div class="space-y-2">
                                <input class="w-full border rounded px-3 py-2" placeholder="Nombre" @bind="requisitoForm.Nombre" />
                                <input class="w-full border rounded px-3 py-2" placeholder="Porcentaje" type="number" @bind="requisitoForm.PorcentajeAsignado" />
                            </div>
                            <div class="flex justify-end space-x-2 mt-4">
                                <button class="px-4 py-2 rounded bg-gray-200" @onclick="()=>mostrarFormularioRequisito=false">Cancelar</button>
                                <button class="px-4 py-2 rounded bg-blue-600 text-white" @onclick="GuardarRequisito">Guardar</button>
                            </div>
                        </div>
                    </div>
                }
            </div>
        </div>
    </div>
}
